import{_ as o,C as r,c as p,o as h,j as i,a as t,aA as l,G as e,w as n}from"./chunks/framework.CYGaAzP0.js";const _=JSON.parse('{"title":"Public Interface","description":"","frontmatter":{},"headers":[],"relativePath":"lib/public.md","filePath":"lib/public.md","lastUpdated":null}'),d={name:"lib/public.md"},k={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""};function u(f,s,E,y,m,b){const a=r("Badge");return h(),p("div",null,[s[12]||(s[12]=i("h1",{id:"Public-Interface",tabindex:"-1"},[t("Public Interface "),i("a",{class:"header-anchor",href:"#Public-Interface","aria-label":'Permalink to "Public Interface {#Public-Interface}"'},"​")],-1)),s[13]||(s[13]=i("h2",{id:"BazerUtils-Module",tabindex:"-1"},[i("code",null,"BazerUtils"),t(" Module "),i("a",{class:"header-anchor",href:"#BazerUtils-Module","aria-label":'Permalink to "`BazerUtils` Module {#BazerUtils-Module}"'},"​")],-1)),i("details",k,[i("summary",null,[s[0]||(s[0]=i("a",{id:"BazerUtils.custom_logger-Tuple{BazerUtils.LogSink}",href:"#BazerUtils.custom_logger-Tuple{BazerUtils.LogSink}"},[i("span",{class:"jlbinding"},"BazerUtils.custom_logger")],-1)),s[1]||(s[1]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[3]||(s[3]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">custom_logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename; kw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><p><code>filename::AbstractString</code>: base name for the log files</p></li><li><p><code>output_dir::AbstractString=./log/</code>: name of directory where log files are written</p></li><li><p><code>filtered_modules_specific::Vector{Symbol}=nothing</code>: which modules do you want to filter out of logging (only for info and stdout) Some packages just write too much log ... filter them out but still be able to check them out in other logs</p></li><li><p><code>filtered_modules_all::Vector{Symbol}=nothing</code>: which modules do you want to filter out of logging (across all logs) Examples could be TranscodingStreams (noticed that it writes so much to logs that it sometimes slows down I/O)</p></li><li><p><code>file_loggers::Union{Symbol, Vector{Symbol}}=[:error, :warn, :info, :debug]</code>: which file logger to register</p></li><li><p><code>log_date_format::AbstractString=&quot;yyyy-mm-dd&quot;</code>: time stamp format at beginning of each logged lines for dates</p></li><li><p><code>log_time_format::AbstractString=&quot;HH:MM:SS&quot;</code>: time stamp format at beginning of each logged lines for times</p></li><li><p><code>displaysize::Tuple{Int,Int}=(50,100)</code>: how much to show on log (same for all logs for now!)</p></li><li><p><code>log_format::Symbol=:log4j</code>: how to format the log files; I have added an option for pretty (all or nothing for now)</p></li><li><p><code>log_format_stdout::Symbol=:pretty</code>: how to format the stdout; default is pretty</p></li><li><p><code>overwrite::Bool=false</code>: do we overwrite previously created log files</p></li></ul><p>The custom_logger function creates four files in <code>output_dir</code>for four different levels of logging: from least to most verbose:<code>filename.info.log.jl</code>,<code>filename.warn.log.jl</code>,<code>filename.debug.log.jl</code>,<code>filename.full.log.jl</code>The debug logging offers the option to filter messages from specific packages (some packages are particularly verbose) using the<code>filter</code> optional argument The full logging gets all of the debug without any of the filters. Info and warn log the standard info and warning level logging messages.</p><p>Note that the default <strong>overwrites</strong> old log files (specify overwrite=false to avoid this).</p>',5)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[2]||(s[2]=[i("a",{href:"https://github.com/LouLouLibs/BazerUtils.jl/blob/fdf0d2faaa8ab1e2b0b3cf604433a205f9db8a77/src/CustomLogger.jl#L72-L98",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),i("details",g,[i("summary",null,[s[4]||(s[4]=i("a",{id:"BazerUtils.read_jsonl-Tuple{IO}",href:"#BazerUtils.read_jsonl-Tuple{IO}"},[i("span",{class:"jlbinding"},"BazerUtils.read_jsonl")],-1)),s[5]||(s[5]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[7]||(s[7]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read_jsonl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{AbstractString, IO}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vector</span></span></code></pre></div><p>Read a JSON Lines (.jsonl) file or stream and return all records as a vector.</p><p>This function reads the entire file or IO stream into memory at once, parsing each line as a separate JSON value. Empty lines are automatically skipped.</p><p><strong>Arguments</strong></p><ul><li><code>source::Union{AbstractString, IO}</code>: Path to the JSON Lines file to read, or an IO stream (e.g., IOBuffer, file handle).</li></ul><p><strong>Returns</strong></p><ul><li><code>Vector</code>: A vector containing all parsed JSON values from the file or stream.</li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Read all records from a JSONL file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> read_jsonl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data.jsonl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Read from an IOBuffer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> IOBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:1}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:2}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> read_jsonl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Access individual records</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">first_record </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;First record ID: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, first_record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id)</span></span></code></pre></div><p><strong>Notes</strong></p><ul><li><p>This function loads all data into memory, so it may not be suitable for very large files.</p></li><li><p>For large files, consider using <code>stream_jsonl()</code> for streaming processing.</p></li><li><p>The function will throw an error if the JSON on any line is malformed.</p></li><li><p>The path must refer to an existing regular file.</p></li></ul><p><strong>See Also</strong></p><ul><li><a href="/LouLouLibs.github.io/BazerUtils.jl/stable/man/read_jsonl#stream_jsonl"><code>stream_jsonl</code></a>: For memory-efficient streaming of large JSONL files.</li></ul>`,13)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[6]||(s[6]=[i("a",{href:"https://github.com/LouLouLibs/BazerUtils.jl/blob/fdf0d2faaa8ab1e2b0b3cf604433a205f9db8a77/src/JSONLines.jl#L16-L54",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),i("details",c,[i("summary",null,[s[8]||(s[8]=i("a",{id:"BazerUtils.write_jsonl-Tuple{AbstractString, Any}",href:"#BazerUtils.write_jsonl-Tuple{AbstractString, Any}"},[i("span",{class:"jlbinding"},"BazerUtils.write_jsonl")],-1)),s[9]||(s[9]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">write_jsonl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename, data; compress</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Write an iterable of JSON-serializable values to a JSON Lines file.</p><ul><li><p><code>filename</code>: Output file path (if ends with <code>.gz</code> or <code>compress=true</code>, writes gzip-compressed)</p></li><li><p><code>data</code>: An iterable (e.g., Vector, generator) of values (Dict, Array, String, Number, Bool, nothing, etc.)</p></li></ul><p>Returns the filename.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">write_jsonl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;out.jsonl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">write_jsonl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;out.jsonl.gz&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div>`,6)),e(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[10]||(s[10]=[i("a",{href:"https://github.com/LouLouLibs/BazerUtils.jl/blob/fdf0d2faaa8ab1e2b0b3cf604433a205f9db8a77/src/JSONLines.jl#L172-L187",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})])])}const C=o(d,[["render",u]]);export{_ as __pageData,C as default};
